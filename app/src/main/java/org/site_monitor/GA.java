/*
 * Copyright (c) 2015 Martin Norbert
 *  Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.site_monitor;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;

import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.Logger;
import com.google.android.gms.analytics.Tracker;

import org.site_monitor.activity.PrefSettingsActivity;

import java.util.Locale;

/**
 * A collection of Google Analytics trackers. Fetch the tracker you need using
 * {@code GA.getInstance().get(...)}
 * <p/>
 * This code was generated by Android Studio but can be safely modified by
 * hand at this point.
 * <p/>
 */
public final class GA {

    private static GA sInstance;
    private final Context context;
    private final Tracker tracker;

    /**
     * Don't instantiate directly - use {@link #tracker()} instead.
     */
    private GA(Application application) {
        context = application.getApplicationContext();
        GoogleAnalytics ga = GoogleAnalytics.getInstance(context);
        ga.enableAutoActivityReports(application);

        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
        boolean analyticsAllowed = preferences.getBoolean(PrefSettingsActivity.ANALYTICS, true);
        ga.setAppOptOut(!analyticsAllowed);
        if (BuildConfig.DEBUG) {
            ga.setDryRun(true);
            ga.getLogger().setLogLevel(Logger.LogLevel.INFO);
        }
        tracker = ga.newTracker(R.xml.ga_tracker_config);
        tracker.setAppName(context.getString(R.string.app_name));
        tracker.setAppVersion(BuildConfig.VERSION_NAME);
        tracker.setAppInstallerId(context.getPackageManager().getInstallerPackageName(context.getPackageName()));
        tracker.setLanguage(Locale.getDefault().getDisplayLanguage());
        tracker.enableAutoActivityTracking(true);
    }

    public static synchronized void initialize(Application application) {
        if (sInstance != null) {
            throw new IllegalStateException("Extra call to initialize analytics trackers");
        }
        sInstance = new GA(application);
    }

    public static synchronized GA getInstance() {
        return sInstance;
    }

    public static synchronized Tracker tracker() {
        if (sInstance == null) {
            throw new IllegalStateException("Call initialize() before tracker()");
        }
        return sInstance.tracker;
    }

    public void startTracking() {
        GoogleAnalytics.getInstance(context).setAppOptOut(false);
    }

    public void stopTracking() {
        GoogleAnalytics.getInstance(context).setAppOptOut(true);
    }
}
